@page "/"
@using WordSearch.Services.Contracts
@inject IGridService GridService
@inject IWordGenerationService WordGenerationService

<div class="content-container">
    <h1>WordSearch Game!</h1>

    <div class="grid-container">
        <!-- Word List on the Left -->
        <div class="word-list-container" style="width:@CalculateMaxWordLength()px 1fr">
            <div class="form-group">
                <input type="text" class="form-control" @bind="newWord" placeholder="Enter a word" />
                <button class="btn btn-primary" @onclick="AddWord">Add</button>
                <span class="text-danger">@feedbackMessage</span>
            </div>

            @if (words.Any())
            {
                <div class="form-group">
                    <label>Current Grid Size: @gridSize.width x @gridSize.height</label>
                    <ul>
                        @foreach (var word in words)
                        {
                            <li class="@(foundWords.Contains(word) ? "found-word" : "")">
                                @word
                                @if (!wordSearchGenerated)
                                {
                                    <button class="btn btn-danger btn-sm" @onclick="@(() => RemoveWord(word))">Remove</button>
                                }
                            </li>
                        }                        
                    </ul>
                </div>
            }

        </div>

        <!-- Grid Container (Central) -->
        <div class="grid-item">
            <div class="form-group">
                <button class="btn btn-success" @onclick="GenerateWordSearch" disabled="@(!words.Any())">Generate WordSearch</button>
                @if (isValidWord)
                {
                    <span class="valid-word">Correct Word Found!</span>
                }
            </div>

            @if (GridService.GetGrid() != null)
            {
                <table class="word-search-grid">
                    @for (int i = 0; i < gridSize.height; i++)
                    {
                        <tr>
                            @for (int j = 0; j < gridSize.width; j++)
                            {
                                int row = i, col = j; // Store loop variables
                                <td @onmousedown="() => OnMouseDown(row, col)"
                                    @onmouseenter="() => OnMouseEnter(row, col)"
                                    @onmouseup="OnMouseUp"
                                    class="@GridService.GetCellClass(row, col)"
                                    @onclick="() => GridService.ToggleCellSelection(row, col)">
                                    @GridService.GetCellValue(row,col)
                                </td>
                            }

                        </tr>
                    }
                </table>

            }
        </div>
    </div>
</div>


@code {
    private string newWord;
    private string feedbackMessage = "";
    private (int width, int height) gridSize;
    private List<string> words = new List<string>();
    private List<(int row, int col)> selectedCells = new List<(int row, int col)>();
    private string currentSelectedWord = string.Empty;
    private bool isValidWord = false;    
    private Random random = new Random();
    private List<string> foundWords = new List<string>();
    private bool wordSearchGenerated = false;
    private bool isDragging = false;

    protected override void OnInitialized()
    {
        GridService.SetCellSelectionChangedCallback(BuildCurrentSelectedWord);
    }

    private void AddWord()
    {
        if (string.IsNullOrWhiteSpace(newWord))
        {
            feedbackMessage = "Please enter a word.";
        }
        else if (words.Contains(newWord.ToUpper()))
        {
            feedbackMessage = "This word is already in the list.";
        }
        else
        {
            words.Add(newWord.ToUpper());
            newWord = string.Empty;
            gridSize = WordGenerationService.CalculateGridSize(words);
            feedbackMessage = ""; // Clear message on successful add
        }
    }

    private void RemoveWord(string word)
    {
        if (words.Contains(word))
        {
            words.Remove(word);
            gridSize = WordGenerationService.CalculateGridSize(words);
        }
    }
    

    private void OnMouseDown(int row, int col)
    {
        isDragging = true;
        GridService.ToggleCellSelection(row, col);
    }

    private void OnMouseEnter(int row, int col)
    {
        if (isDragging)
        {
            GridService.ToggleCellSelection(row, col);
        }
    }

    private void OnMouseUp()
    {
        isDragging = false;
        BuildCurrentSelectedWord(); // This can be in Index.razor or triggered via a callback in GridService
    }


    private void BuildCurrentSelectedWord()
    {
        Console.WriteLine("Building current selected word");

        string forwardWord = string.Empty;
        string reverseWord = string.Empty;

        foreach (var cell in selectedCells)
        {
            forwardWord += GridService.GetCellValue(cell.row, cell.col);
            reverseWord = GridService.GetCellValue(cell.row, cell.col) + reverseWord;
        }

        isValidWord = words.Contains(forwardWord) || words.Contains(reverseWord);

        if (isValidWord)
        {
            string foundWord = words.Contains(forwardWord) ? forwardWord : reverseWord;
            if (!foundWords.Contains(foundWord))
            {
                foundWords.Add(foundWord);
                MarkWordAsCorrect(); // Updated call
                currentSelectedWord = string.Empty;
                selectedCells.Clear();
                StateHasChanged();
            }
        }
    }

    private void MarkWordAsCorrect()
    {
        Console.WriteLine("Marking word as correct");

        foreach (var cell in selectedCells)
        {
            GridService.SetCellAsPartOfCorrectWord(cell.row, cell.col);
        }
    }


    private int CalculateMaxWordLength()
    {
        if (!words.Any())
        {
            return 300; // Default minimum width when there are no words
        }

        int maxLength = words.Max(word => word.Length);
        int widthPerCharacter = 8; 
        int padding = 20; 
        int calculatedWidth = maxLength * widthPerCharacter + padding;

        int maxWidth = 800; 
        return Math.Min(calculatedWidth, maxWidth);
    }

    private void GenerateWordSearch()
    {
        // Calculate the grid size based on the words list
        var (width, height) = WordGenerationService.CalculateGridSize(words);
        GridService.InitializeGrid(width, height);

        // First, try placing the user-added words in the grid
        WordGenerationService.PlaceWords(words, GridService.GetGrid());

        // Then fill the remaining empty spaces
        WordGenerationService.FillEmptySpaces(GridService.GetGrid());

        wordSearchGenerated = true;
    }
}
